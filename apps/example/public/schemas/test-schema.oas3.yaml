#
# Schema to test the editor.
#
openapi: 3.0.3
components:
  schemas:
    ListPrimitive:
      x-jsonld-context:
        "@vocab": https://w3id.org/italia/onto/CPV/
      type: object
      properties:
        hasLevelOfEducation:
          description: >-
            Array properties show the rdfs:comment too.
          type: array
          items:
            type: string
      example:
        hasLevelOfEducation: [NED, L]
    ListObject:
      x-jsonld-context:
        "@vocab": https://w3id.org/italia/onto/CLV/
      type: object
      properties:
        hasAddress:
          type: array
          minItems: 0
          maxItems: 2
          items:
            $ref: "#/components/schemas/B"
      example:
        hasAddress:
          - hasCity: Rome
          - hasCity: Milan
    B:
      type: object
      x-jsonld-type: https://w3id.org/italia/onto/CLV/Address
      x-jsonld-context:
        "@vocab": https://w3id.org/italia/onto/CLV/
      properties:
        hasCity:
          type: string
    A:
      type: object
      x-jsonld-type: https://w3id.org/italia/onto/CPV/Person
      x-jsonld-context:
        "@vocab": https://w3id.org/italia/onto/CPV/
      properties:
        hasBirthPlace:
          $ref: "#/components/schemas/B"
    ExportedSchemas:
      anyOf: []
    #
    # Semantic information for primitive types in JSON-LD
    #   are defined in the parent object.
    #
    Primitive:
      type: string
      description: >-
        JSON-LD does not support to attach a `@context` to a primitive type,
        and the x-jsonld-type would be something like `rdfs:Literal`, that
        bears no semantic information.
    Array:
      type: array
      description: >-
        JSON-LD does not support to attach a `@context` to a primitive type,
        and the x-jsonld-type would be something like `rdfs:Literal`, that
        bears no semantic information.
      items:
        type: string
    #
    # Test the context and type resolution.
    #
    Unannotated:
      type: object
      description: >-
        Unannotated objects are rendered normally.
    NoContextNoParty:
      type: object
      x-jsonld-type: https://w3id.org/italia/onto/CPV/Alive
      properties:
        givenName:
          type: string
          description: >-
            Without `x-jsonld-context`,
            [JSON-LD Framing](https://www.w3.org/TR/json-ld-framing/)
            cannot resolve properties because
            there's no `x-jsonld-context`.

            Moreover, the editor warns that to open the playground
            the schema must have a `x-jsonld-context`.
      example:
        givenName: John
    TypeUseContext1:
      type: object
      x-jsonld-type: Person
      x-jsonld-context:
        "@vocab": "https://w3id.org/italia/onto/CPV/"
      description: >-
        The associated rdf:type is inferred from @vocab.
        The editor shows only the rdf:type information,
        since we have no properties.

        Resulting RDF is:

        ```turtle
        _:b0 a <https://w3id.org/italia/onto/CPV/Person> .
        ```
      # Use an empty object to enable the JSON-LD playground.
      example: {}
    TypeUsesContext2:
      type: object
      x-jsonld-type: RPO:RegisteredResidentPerson
      x-jsonld-context:
        "@vocab": "https://w3id.org/italia/onto/CPV/"
        RPO: https://w3id.org/italia/onto/RPO/
      properties:
        givenName:
          type: string
          description: >-
            The associated rdf:Property is inferred from @vocab.
            The editor shows the retrieved information.
            Resulting RDF is:

            ```turtle
            _:b0 a <https://w3id.org/italia/onto/RPO/RegisteredResidentPerson> .
            _:b0 <https://w3id.org/italia/onto/CPV/givenName> "John" .
            ```
      # Use an empty object to enable the JSON-LD playground.
      example:
        givenName: John
    NoExampleNoPlayground:
      type: object
      x-jsonld-context:
        "@vocab": "https://w3id.org/italia/onto/CPV/"
      description: >-
            The editor warns that to open the playground
            the schema must have an `example`.
    TypeUsesContext3:
      type: object
      x-jsonld-context:
        "@vocab": "https://w3id.org/italia/onto/CPV/"
      properties:
        isParentOf:
          type: object
          x-jsonld-type: Person
          description: >-
            The rdf:type is resolved using the x-jsonld-context of the parent.
          properties:
            givenName:
              type: string
          example:
            givenName: John
    Card:
      x-jsonld-type: Person
      x-jsonld-context:
        "@vocab": "https://w3id.org/italia/onto/CPV/"
        email: "@id"
        "@base": "mailto:"
      properties:
        fullName:
          type: string
        email:
          type: string
      example:
        email: a@b.c
        fullName: Roberto Polli
    Addressbook:
      type: object
      x-jsonld-type: "https://w3id.org/italia/onto/CPV/Addressbook"
      x-jsonld-context:
        "@vocab": "https://w3id.org/italia/onto/CPV/"
      properties:
        owner:
          $ref: '#/components/schemas/Card'
    Person:
      type: object
      x-jsonld-type: "https://w3id.org/italia/onto/CPV/Person"
      x-jsonld-context:
        "@vocab": "https://w3id.org/italia/onto/CPV/"
        detached: null
        family_name: familyName
        tax_code:
          "@id": taxCode
        education_level:
          "@id": hasLevelOfEducation
          "@type": "@id"
      properties:
        missing:
          type: string
          description: >-
            This property does not exist in the CPV ontology.
            The editor shows a :warning: sign.
        detached:
          type: number
          description: >-
            This is a detached property.
            The editor does show nothing.
        givenName:
          type: string
          description: >-
            The associated rdf:Property is inferred from @vocab.
            The editor shows the retrieved information.
          example: John
        family_name:
          type: string
          description: >-
            The associated rdf:Property is explicitly mentioned in @context.
            The editor shows the retrieved information.
        tax_code:
          type: string
          description: >-
            The associated rdf:Property is explicitly mentioned in @context using `@id`.
            The editor shows the retrieved information.
        education_level:
          type: string
          description: >-
            The associated rdf:Property is explicitly mentioned in @context using `@id`.
            The editor identifies the controlled vocabulary
            even if it is not mentioned in the context.
          example: "L"
        hasLevelOfEducation:
          type: string
          description: >-
            The associated rdf:Property is not explicitly mentioned in @context.
            The editor identifies the controlled vocabulary
            even if it is not mentioned in the context.
          example: "L"
      example:
        givenName: John
        family_name: Doe
        tax_code: "DOEJHN77T01H501A"
        education_level: "L"

info:
  title: Test schema collection
  version: 202409.01.00
  x-summary: A schema to test functionalities of the editor.
  license:
    name: BSD3
    url: https://opensource.org/licenses/BSD-3-Clause
  termsOfService: https://opensource.org/licenses/BSD-3-Clause
  contact:
    name: Roberto Polli
    email: roberto.polli@par-tec.it
    url: https://www.par-tec.it
  description: |-

    ## Welcome!
    This schema is used to test the editor functionalities.
#
# If this is a schema-only file, you can leave the following sections empty.
# Do not remove them, as they are required by the OpenAPI 3.0 specification.
#
paths: {}
servers: []
tags: []
